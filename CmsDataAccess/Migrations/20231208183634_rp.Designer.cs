// <auto-generated />
using System;
using CmsDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CmsDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231208183634_rp")]
    partial class rp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CmsDataAccess.Models.AboutUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AboutUs");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CmsDataAccess.Models.AddressTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("AddressTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReminderSent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("CmsDataAccess.Models.AppointmentSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentAveragePeriod")
                        .HasColumnType("int");

                    b.Property<string>("ArabicMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanCancel")
                        .HasColumnType("bit");

                    b.Property<double>("CanCancelBefore")
                        .HasColumnType("float");

                    b.Property<string>("EnglishMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstReminderHour")
                        .HasColumnType("int");

                    b.Property<int>("MaximumAllowedBookedAppointments")
                        .HasColumnType("int");

                    b.Property<int>("MaximumAllowedMissedAppointments")
                        .HasColumnType("int");

                    b.Property<int>("SecondReminderHour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppointmentSetting");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ArchivedNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiType")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArchivedNotification");
                });

            modelBuilder.Entity("CmsDataAccess.Models.AttendanceTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DayOff")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("EnteringTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LeavingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonForAbsence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("AttendanceTable");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BannerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("CmsDataAccess.Models.BookingPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AllowedBookingNumberPerday")
                        .HasColumnType("int");

                    b.Property<int?>("MaximunAllowedMissedAppointments")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BookingPolicy");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CenterAddress");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RatingOwner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CenterRating");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CenterLogo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("CenterSettings");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterSettingsTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterSettingsId");

                    b.ToTable("CenterSettingsTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ChatMessages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConnectionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AverageExaminationPeriod")
                        .HasColumnType("int");

                    b.Property<string>("ClinicImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClinicSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicSpecialityId");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ClinicRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RatingOwner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClinicRating");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ClinicSpeciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ClinicSpeciality");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ClinicTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ClinincSpecialityTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicSpecialityId");

                    b.ToTable("ClinincSpecialityTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ConnectionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupOldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConnectionGroup");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CenterSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CenterSettingsId");

                    b.HasIndex("MarsCenterId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CourseAttendanceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseAttendanceType");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CourseBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseAttendanceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxNumberOfStudents")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CourseBase");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CourseLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseLevel");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CourseSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterTutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseBaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DailyRecurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MarsCenterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RecurrenceID")
                        .HasColumnType("int");

                    b.Property<int?>("SessionOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WeeklyRecurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DailyRecurrenceId");

                    b.HasIndex("WeeklyRecurrenceId");

                    b.ToTable("CourseSession");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DailyRecurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EndAfterNumberOfOccurence")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool?>("EndWhenCourseEnd")
                        .HasColumnType("bit");

                    b.Property<int?>("Interval")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("DailyRecurrence");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecialityId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DoctorBasicInfoTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorBasicInfoTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DoctorRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RatingOwner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DoctorRating");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DoctorSpeciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpeciality");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DoctorSpecialityTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecialityId");

                    b.ToTable("DoctorSpecialityTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.Models.FAQ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("CmsDataAccess.Models.FAQTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FAQId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FAQId");

                    b.ToTable("FAQTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.LogInPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllTheTime")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("EndPeriod")
                        .HasColumnType("time");

                    b.Property<bool>("Fri")
                        .HasColumnType("bit");

                    b.Property<bool>("Mon")
                        .HasColumnType("bit");

                    b.Property<bool>("Sat")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartPeriod")
                        .HasColumnType("time");

                    b.Property<bool>("Sun")
                        .HasColumnType("bit");

                    b.Property<bool>("Thurs")
                        .HasColumnType("bit");

                    b.Property<bool>("Tues")
                        .HasColumnType("bit");

                    b.Property<bool>("Wed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("LogInPolicy");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MarsCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CenterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegister")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterAddressId");

                    b.ToTable("MarsCenter");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MedicalCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CenterImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("MedicalCenter");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MedicalCenterTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("MedicalCenterTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MedicalVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("BloodPressure")
                        .HasColumnType("float");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExaminationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExaminationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("GlucoseLevel")
                        .HasColumnType("float");

                    b.Property<double?>("HeartBeat")
                        .HasColumnType("float");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("MedicalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MedicalVisit");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MyDayOfWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MyDayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyDayNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MyDayOfWeek");
                });

            modelBuilder.Entity("CmsDataAccess.Models.NavigationMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Documentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("AspNetNavigationMenu");
                });

            modelBuilder.Entity("CmsDataAccess.Models.NewRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NewRequest");
                });

            modelBuilder.Entity("CmsDataAccess.Models.NotificationPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HoursBeforeNotification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationPolicy");
                });

            modelBuilder.Entity("CmsDataAccess.Models.OpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("CmsDataAccess.Models.RoleMenuPermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("NavigationMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "NavigationMenuId");

                    b.HasIndex("NavigationMenuId");

                    b.ToTable("AspNetRoleMenuPermission");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ShiftTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeModelId");

                    b.ToTable("ShiftTable");
                });

            modelBuilder.Entity("CmsDataAccess.Models.UserResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserResetToken");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ValidQR", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("QRType")
                        .HasColumnType("bit");

                    b.Property<string>("Secretkey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ValidQR");
                });

            modelBuilder.Entity("CmsDataAccess.Models.WeeklyRecurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EndAfterNumberOfOccurence")
                        .HasColumnType("int");

                    b.Property<bool?>("EndWhenCourseEnd")
                        .HasColumnType("bit");

                    b.Property<bool?>("Fri")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("FriEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("FriStart")
                        .HasColumnType("time");

                    b.Property<int?>("Interval")
                        .HasColumnType("int");

                    b.Property<bool?>("Mon")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("MonEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MonStart")
                        .HasColumnType("time");

                    b.Property<bool?>("Sat")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("SatEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SatStart")
                        .HasColumnType("time");

                    b.Property<bool?>("Sun")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("SunEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SunStart")
                        .HasColumnType("time");

                    b.Property<bool?>("Thu")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("ThuEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ThuStart")
                        .HasColumnType("time");

                    b.Property<bool?>("Tue")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("TueEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TueStart")
                        .HasColumnType("time");

                    b.Property<bool?>("Wed")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("WedEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WedStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("WeeklyRecurrence");
                });

            modelBuilder.Entity("CmsDataAccess.Models.WorkingHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CenterTutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CenterTutorId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("CmsDataAccess.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CenterAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CenterStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gendre")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalCardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fcm_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CenterAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CourseBaseStudent", b =>
                {
                    b.Property<Guid>("CourseBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseBaseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseBaseStudent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterSupervisor", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("CenterSupervisor", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterTutor", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("CenterTutor", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.Models.CompanyEmployee", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("CompanyEmployee");
                });

            modelBuilder.Entity("CmsDataAccess.Models.EmployeeModel", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("EmployeeModel");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Parent", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Parent", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.Models.Patient", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<int>("GeneralNumber")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.Models.Student", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MarsCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.Models.SysAdmin", b =>
                {
                    b.HasBaseType("CmsDataAccess.Person");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("SysAdmin", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.Models.AddressTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Address", null)
                        .WithMany("AddressTranslation")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterSettings", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterSettingsTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.Models.CenterSettings", null)
                        .WithMany("CenterSettingsTranslation")
                        .HasForeignKey("CenterSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.Certificate", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Doctor", null)
                        .WithMany("Certificates")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Clinic", b =>
                {
                    b.HasOne("CmsDataAccess.Models.ClinicSpeciality", "ClinicSpeciality")
                        .WithMany()
                        .HasForeignKey("ClinicSpecialityId");

                    b.Navigation("ClinicSpeciality");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ClinicTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Clinic", null)
                        .WithMany("ClinicTranslation")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.ClinincSpecialityTranslations", b =>
                {
                    b.HasOne("CmsDataAccess.Models.ClinicSpeciality", null)
                        .WithMany("ClinincSpecialityTranslations")
                        .HasForeignKey("ClinicSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.ContactInfo", b =>
                {
                    b.HasOne("CmsDataAccess.Models.CenterSettings", null)
                        .WithMany("ContactInfo")
                        .HasForeignKey("CenterSettingsId");

                    b.HasOne("CmsDataAccess.Models.MarsCenter", null)
                        .WithMany("ContactInfo")
                        .HasForeignKey("MarsCenterId");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CourseSession", b =>
                {
                    b.HasOne("CmsDataAccess.Models.DailyRecurrence", "DailyRecurrence")
                        .WithMany()
                        .HasForeignKey("DailyRecurrenceId");

                    b.HasOne("CmsDataAccess.Models.WeeklyRecurrence", "WeeklyRecurrence")
                        .WithMany()
                        .HasForeignKey("WeeklyRecurrenceId");

                    b.Navigation("DailyRecurrence");

                    b.Navigation("WeeklyRecurrence");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Doctor", b =>
                {
                    b.HasOne("CmsDataAccess.Models.DoctorSpeciality", "DoctorSpeciality")
                        .WithMany()
                        .HasForeignKey("DoctorSpecialityId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DoctorSpeciality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DoctorBasicInfoTranslations", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Doctor", null)
                        .WithMany("DoctorBasicInfoTranslations")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DoctorSpecialityTranslations", b =>
                {
                    b.HasOne("CmsDataAccess.Models.DoctorSpeciality", null)
                        .WithMany("DoctorSpecialityTranslations")
                        .HasForeignKey("DoctorSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.FAQTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.Models.FAQ", null)
                        .WithMany("FAQTranslation")
                        .HasForeignKey("FAQId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.MarsCenter", b =>
                {
                    b.HasOne("CmsDataAccess.Models.CenterAddress", "CenterAddress")
                        .WithMany()
                        .HasForeignKey("CenterAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CenterAddress");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MedicalCenter", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MedicalCenterTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.Models.MedicalCenter", null)
                        .WithMany("MedicalCenterTranslation")
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.NavigationMenu", b =>
                {
                    b.HasOne("CmsDataAccess.Models.NavigationMenu", "ParentNavigationMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentNavigationMenu");
                });

            modelBuilder.Entity("CmsDataAccess.Models.OpeningHours", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Clinic", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.RoleMenuPermission", b =>
                {
                    b.HasOne("CmsDataAccess.Models.NavigationMenu", "NavigationMenu")
                        .WithMany()
                        .HasForeignKey("NavigationMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationMenu");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ShiftTable", b =>
                {
                    b.HasOne("CmsDataAccess.Models.EmployeeModel", null)
                        .WithMany("ShiftTables")
                        .HasForeignKey("EmployeeModelId");
                });

            modelBuilder.Entity("CmsDataAccess.Models.WorkingHours", b =>
                {
                    b.HasOne("CmsDataAccess.Models.CenterTutor", null)
                        .WithMany("WorkingHours")
                        .HasForeignKey("CenterTutorId");
                });

            modelBuilder.Entity("CmsDataAccess.Person", b =>
                {
                    b.HasOne("CmsDataAccess.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("CmsDataAccess.Models.CenterAddress", "CenterAddress")
                        .WithMany()
                        .HasForeignKey("CenterAddressId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("CenterAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseBaseStudent", b =>
                {
                    b.HasOne("CmsDataAccess.Models.CourseBase", null)
                        .WithMany()
                        .HasForeignKey("CourseBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsDataAccess.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterSupervisor", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.CenterSupervisor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterTutor", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.CenterTutor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.CompanyEmployee", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.CompanyEmployee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.EmployeeModel", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.EmployeeModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.Parent", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.Parent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.Patient", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.Student", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.SysAdmin", b =>
                {
                    b.HasOne("CmsDataAccess.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.Models.SysAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.Models.Address", b =>
                {
                    b.Navigation("AddressTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterSettings", b =>
                {
                    b.Navigation("CenterSettingsTranslation");

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Clinic", b =>
                {
                    b.Navigation("ClinicTranslation");

                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("CmsDataAccess.Models.ClinicSpeciality", b =>
                {
                    b.Navigation("ClinincSpecialityTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.Models.Doctor", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("DoctorBasicInfoTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.Models.DoctorSpeciality", b =>
                {
                    b.Navigation("DoctorSpecialityTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.Models.FAQ", b =>
                {
                    b.Navigation("FAQTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MarsCenter", b =>
                {
                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("CmsDataAccess.Models.MedicalCenter", b =>
                {
                    b.Navigation("MedicalCenterTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.Models.CenterTutor", b =>
                {
                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("CmsDataAccess.Models.EmployeeModel", b =>
                {
                    b.Navigation("ShiftTables");
                });
#pragma warning restore 612, 618
        }
    }
}
